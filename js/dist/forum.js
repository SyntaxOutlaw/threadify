(()=>{var e={n:t=>{var r=t&&t.__esModule?()=>t.default:()=>t;return e.d(r,{a:r}),r},d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};(()=>{"use strict";e.r(t),e.d(t,{calculateThreadDepth:()=>C,clearThreadDepthCache:()=>A,createThreadedPosts:()=>b,extractParentIdFromContent:()=>T,getThreadedPostsCache:()=>x,getThreadifyStatus:()=>R,isThreadingActive:()=>M});const r=flarum.core.compat["common/extend"],n=flarum.core.compat["forum/components/PostStream"];var o=e.n(n);function a(e){return e&&void 0!==e._threadDepth?{depth:e._threadDepth,threadPath:e._threadPath,isRoot:e._isRoot,childCount:e._childCount,descendantCount:e._descendantCount,rootPostId:e._rootPostId}:null}var i=!1,s=null,d=null,u=0;function c(e){var t=e.stream.discussion.id();console.log("[Threadify] Loading threads for discussion "+t),function(e){return console.log("[Threadify] Loading threads for discussion "+e),app.request({method:"GET",url:app.forum.attribute("apiUrl")+"/discussions/"+e+"/threads"}).then(function(e){console.log("[Threadify] Loaded "+e.data.length+" thread entries"),e.included&&(console.log("[Threadify] Processing "+e.included.length+" included items"),e.included.forEach(function(e){console.log("[Threadify] Including "+e.type+":"+e.id),app.store.pushObject(e)}));var t=e.data.map(function(e){var t=e.attributes.postId,r=app.store.getById("posts",t);return r?(console.log("[Threadify] Post "+t+" found, user:",r.user?r.user():"NO USER"),r._threadDepth=e.attributes.depth,r._threadPath=e.attributes.threadPath,r._isRoot=e.attributes.isRoot,r._childCount=e.attributes.childCount,r._descendantCount=e.attributes.descendantCount,r._rootPostId=e.attributes.rootPostId,r._parentPostId=e.attributes.parentPostId,console.log("[Threadify] Post "+t+" depth: "+r._threadDepth+", path: "+r._threadPath)):console.warn("[Threadify] Post "+t+" not found in store"),r}).filter(function(e){return null!==e});return console.log("[Threadify] Processed "+t.length+" threaded posts"),t}).catch(function(e){return console.error("[Threadify] Failed to load discussion threads:",e),[]})}(t).then(function(e){d===t?(s=e,i=!0,u=e?e.filter(function(e){return e}).length:0,console.log("[Threadify] Successfully loaded "+s.length+" threaded posts"),console.log("[Threadify] Sample post metadata:",s[0]?{id:s[0].id(),depth:s[0]._threadDepth,hasUser:!!s[0].user,userFunction:typeof s[0].user}:"No posts"),m.redraw()):console.log("[Threadify] Discussion changed while loading, ignoring results")}).catch(function(e){console.error("[Threadify] Failed to load threaded posts:",e),i=!0,s=null})}function h(){return{threadsLoaded:i,hasThreadedPosts:!!s,threadedPostCount:s?s.length:0,currentDiscussionId:d}}function l(){console.log("[Threadify] Force reloading threads"),i=!1,s=null,m.redraw()}function f(){return i&&!!s}const p=flarum.core.compat["forum/components/Post"];var g=e.n(p);const y=flarum.core.compat["forum/components/ReplyComposer"];var v=e.n(y);function T(e){if(!e||"string"!=typeof e)return null;var t=e.match(/@"[^"]*"#p(\d+)/);if(t&&t[1]){var r=parseInt(t[1],10);if(!isNaN(r)&&r>0)return r}return null}function P(e){var t=[];function r(e,n){if(void 0===n&&(n=0),e){t.push(e);var o=e._threadChildren||[];o.sort(function(e,t){return(e.createdAt?e.createdAt().getTime():0)-(t.createdAt?t.createdAt().getTime():0)}),o.forEach(function(e){r(e,n+1)})}}return e.sort(function(e,t){return(e.createdAt?e.createdAt().getTime():0)-(t.createdAt?t.createdAt().getTime():0)}),e.forEach(function(e){r(e)}),t}function b(e){var t=function(e){var t=[],r=new Map,n=new Map;return e.forEach(function(e){if(e){var t=e.id();r.set(t,e),n.set(t,[])}}),e.forEach(function(e){if(e){e.id();var o=e.attribute("parent_id");o&&r.has(String(o))?n.get(String(o)).push(e):t.push(e)}}),e.forEach(function(e){e&&(e._threadChildren=n.get(e.id())||[])}),t}(e);return P(t)}var _=new Map,S=10;function C(e,t){var r=e.id();if(_.has(r))return _.get(r);var n=e.attribute("parent_id");if(!n)return _.set(r,0),0;if(!t.find(function(e){return e&&e.id()==n}))return _.set(r,0),0;var o=w(e,t,new Set);return _.set(r,o),o}function w(e,t,r){var n=e.id();if(r.has(n))return console.warn("[Threadify] Cycle detected for post "+n),0;if(_.has(n))return _.get(n);var o=e.attribute("parent_id");if(!o)return 0;var a=t.find(function(e){return e&&e.id()==o});if(!a)return 0;r.add(n);var i=w(a,t,r)+1;return r.delete(n),Math.min(i,S)}function A(){_.clear()}var D=null,I=null;function x(){return D}function M(){return!(!D||!I)}function R(){return{version:"1.0.5",name:"Threadify",author:"syntaxoutlaw",isActive:!0,components:{postStream:"loaded",post:"loaded",replyComposer:"loaded"},features:["Post threading via mentions","Automatic parent/child post loading","Visual thread depth indication","Thread tree caching for performance"]}}app.initializers.add("syntaxoutlaw-threadify",function(){try{(0,r.extend)(o().prototype,"oninit",function(){console.log("[Threadify] Initializing simplified threaded PostStream");var e=this.stream.discussion.id();d!==e&&(console.log("[Threadify] Discussion changed, resetting thread state"),i=!1,s=null,d=e),this.stream.discussion,i||(console.log("[Threadify] Loading threaded posts from API"),c(this))}),(0,r.extend)(o().prototype,"oncreate",function(){var e=this.stream.discussion.id();d!==e&&(console.log("[Threadify] Discussion changed in oncreate, resetting"),i=!1,s=null,d=e,this.stream.discussion,c(this))}),(0,r.extend)(o().prototype,"onupdate",function(){this.stream.discussion;var e=this.stream.posts(),t=e?e.filter(function(e){return e}).length:0;t!==u&&(console.log("[Threadify] Post count changed: "+u+" -> "+t+", reloading threads"),u=t,i=!1,s=null,c(this))}),(0,r.extend)(o().prototype,"onremove",function(){console.log("[Threadify] PostStream being removed, cleaning up")}),(0,r.extend)(o().prototype,"posts",function(e){if(i&&s&&d===this.stream.discussion.id())return console.log("[Threadify] Returning cached threaded posts ("+s.length+" posts)"),s;var t=e();return console.log("[Threadify] Returning original posts ("+(t?t.length:0)+" posts)"),t}),(0,r.extend)(g().prototype,"classes",function(e){var t=this.attrs.post;if(!t)return console.warn("[Threadify] No post in ThreadedPost.classes"),e;var r=function(e){var t=function(e){if(!e)return 0;var t=a(e);return t?Math.min(t.depth,10):e.attribute("parent_id")?1:0}(e),r=[];t>0?(r.push("threaded-post"),r.push("thread-depth-"+t),t>=3&&r.push("thread-deep"),t>=5&&r.push("thread-very-deep")):r.push("thread-root");var n=a(e);return n&&(n.isRoot&&r.push("thread-root-confirmed"),n.childCount>0&&(r.push("has-children"),r.push("child-count-"+Math.min(n.childCount,10))),n.descendantCount>0&&r.push("has-descendants")),r}(t);return console.log("[Threadify] Adding classes to post "+t.id()+": "+r.join(", ")),r.forEach(function(t){e.push(t)}),e}),(0,r.extend)(v().prototype,"data",function(e){var t=T(e.content);return t&&(e.parent_id=t,console.log("[Threadify] Reply threading to post",t)),e}),console.log("[Threadify] Simplified extension loaded"),window.threadifyDebug={getState:h,reload:l,isActive:f,help:function(){console.log("\n[Threadify] Simplified Debug Commands:\n- threadifyDebug.getState() - Get current threading state\n- threadifyDebug.reload() - Force reload threads for current discussion\n- threadifyDebug.isActive() - Check if threading is currently active\n- threadifyDebug.help() - Show this help\n\nNew System: Uses pre-computed threads from backend API\n- Single API call instead of complex frontend logic\n- Pre-computed thread paths and depths\n- Much more reliable and performant\n        ")}}}catch(e){console.error("[Threadify] Failed to initialize:",e)}})})(),module.exports=t})();
//# sourceMappingURL=forum.js.map